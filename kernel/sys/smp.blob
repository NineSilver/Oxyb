org 0x1000
bits 16

cli
cld
mov ax, 0x0
mov ds, ax
mov es, ax
mov fs, ax
mov gs, ax
mov ss, ax

mov byte [0x500], 1

lgdt [pm_gdtr]

mov eax, cr0
or al, 0x1
mov cr0, eax

jmp 0x08:entry32

bits 32
entry32:
    mov bx, 0x10
    mov ds, bx
    mov es, bx
    mov ss, bx

    mov eax, dword [0x510]
    mov cr3, eax

    mov eax, cr4
    or eax, (1 << 5) | (1 << 7)
    mov cr4, eax

    mov ecx, 0xc0000080
    rdmsr
    or eax, 1 << 8
    wrmsr

    mov eax, cr0
    or eax, 1 << 31 
    mov cr0, eax

    lgdt [lm_gdtr]
    jmp 0x08:entry64

bits 64
entry64:
    mov ax, 0x10
    mov ds, ax
    mov es, ax
    mov fs, ax
    mov gs, ax
    mov ss, ax

    lgdt [0x520]
    lidt [0x530]

    mov rsp, [0x540]
    mov rbp, 0x0

    push 0x0
    popf

    mov rax, [0x550]
    call rax

align 16
pm_gdtr:
    dw pm_gdt_end - pm_gdt_start - 1
    dd pm_gdt_start

align 16
pm_gdt_start:
    dq 0
    dq 0x00CF9A000000FFFF
    dq 0x00CF92000000FFFF
pm_gdt_end:

align 16
lm_gdtr:
    dw lm_gdt_end - lm_gdt_start - 1
    dq lm_gdt_start

align 16
lm_gdt_start:
    dq 0
    dq 0x00AF98000000FFFF
    dq 0x00CF92000000FFFF
lm_gdt_end:

